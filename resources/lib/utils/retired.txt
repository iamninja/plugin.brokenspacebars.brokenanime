# -*- coding: utf-8 -*-

def index():
    addDirectoryItem(plugin.handle, plugin.url_for(
        show_conan), ListItem("Detective Conan"), True)
    addDirectoryItem(plugin.handle, plugin.url_for(
        show_grouped_episodes, id = 210, slug = "detective-conan"), ListItem("Detective Conan - Kitsu"), True)

@plugin.route('/popular-anime')
def popular_kitsu():
    popular = get_popular_anime()
    create_anime_list(popular)

@plugin.route('/trending-anime')
def trending_kitsu():
    trending = get_trending_anime()
    create_anime_list(trending)

# TODO: Not working getLatestInfo returns None
@plugin.route('/next-episodes')
def next_episodes():
    print("---------next_episodes()-------")
    progress = Progress("Retrieving user library", "Getting ")
    progress, library = get_user_library(progress)
    progress = Progress("Retrieving episodes", "Getting ")
    progress.max = library.count
    print("---------Before enter-------")
    for entry in library.entries:
        print("---------in loop-------")
        print("---------" + entry.anime.slug + "---------")
        latestInfo = get_latest_episode_info(entry.anime.slug)
        if latestInfo.latestEpisode <= entry.progress:
            label = entry.anime.canonicalTitle + "[CR]Episode " + str(entry.progress)
        else:
            label = entry.anime.canonicalTitle + "[CR]Next Episode in: " + str(latestInfo.nextAiringAt)
            progress.easyUpdate(label)
        print(label)
        progress.easyUpdate(label)
        list_item = ListItem(label=label)
        list_item.setInfo('video', entry.anime.getAnimeInfo())
        list_item.setArt(entry.anime.getAnimeArt())
        is_folder = False
        addDirectoryItem(plugin.handle, plugin.url_for(
            get_sources, entry.anime.slug, entry.progress), list_item, is_folder)
    progress.close()
    endOfDirectory(plugin.handle)

@plugin.route('/user-library')
def user_library():
    progress = Progress("Retrieving user library", "Getting ")
    progress, library = get_user_library(progress)
    progress.close()
    for entry in library.entries:
        list_item = ListItem(label=entry.anime.canonicalTitle)
        list_item.setInfo('video', entry.anime.getAnimeInfo())
        list_item.setArt(entry.anime.getAnimeArt())
        is_folder = True
        if (entry.anime.episodeCount != None) and (entry.anime.episodeCount < 80):
            addDirectoryItem(plugin.handle, plugin.url_for(
                show_episodes, id = entry.anime.id, slug = entry.anime.slug, latest_episode = -1, offset = 0), list_item, is_folder)
        else:
            addDirectoryItem(plugin.handle, plugin.url_for(
                show_grouped_episodes, id = entry.anime.id, slug = entry.anime.slug), list_item, is_folder)
    endOfDirectory(plugin.handle)

@plugin.route('/anime/kitsu/<id>/<slug>/episodes/latest-<latest_episode>/<offset>')
def show_episodes(id, slug, latest_episode = -1, offset = 0):
    # Fix episode count a bit: says 1-20 but includes 1-21
    episodes = get_anime_episodes(id, offset)
    for episode in episodes:
        title = episode.canonicalTitle if episode.canonicalTitle != None else ""
        if (int(episode.number > int(latest_episode)) and int(latest_episode) != -1):
            item_label = ("Episode " + str(episode.number) + "[CR]" + "Not released yet" )
        else:
            item_label = ("Episode " + str(episode.number) + "[CR]" + title )
        list_item = ListItem(label = item_label)
        list_item.setInfo('video', episode.getEpisodeInfo())
        list_item.setArt(episode.getEpisodeArt())
        is_folder = False
        addDirectoryItem(plugin.handle, plugin.url_for(
            get_sources, slug, episode.number), list_item, is_folder)
    endOfDirectory(plugin.handle)

#For Conan
@plugin.route('/anime/<id>/<slug>/episodes-grouped')
def show_grouped_episodes(id, slug):
    # Need to find the exact number of released episodes
    # Kitsu adds dummy-empty unreleased episodes in long running shows
    # Until we find a new way to get that from an API we will use gogoanime1
    latest_episode = get_latest_episode_number(slug)
    anime = get_anime_by_id(id)
    # Create a list item per 20 episodes
    for start in range(1, int(latest_episode), 20):
        # print("In loop: " + str(start))
        end = str(int(start) + 19) if (int(start) + 19 <= int(latest_episode)) else str(latest_episode)
        list_item = ListItem(label=('Episodes ' + str(start) + '-' + str(end)).encode('utf-8'))
        list_item.setInfo('video', anime.getAnimeInfo())
        list_item.setArt(anime.getAnimeArt())
        is_folder = True
        addDirectoryItem(plugin.handle, plugin.url_for(
            show_episodes, id = id, slug = slug, offset=str(start), latest_episode=str(latest_episode)), list_item, is_folder)
    endOfDirectory(plugin.handle)
    pass

# For Conan
@plugin.route('/anime/kitsu/<id>/<slug>/episodes/latest-<latest_episode>/<offset>')
def show_episodes(id, slug, latest_episode = -1, offset = 0):
    # Kitsu will handle episodes so it can show the title
    episodes = get_anime_episodes(id, offset)
    for episode in episodes:
        title = episode.canonicalTitle if episode.canonicalTitle != None else ""
        if int(episode.number) == int(latest_episode):
            item_label = ("Episode " + str(episode.number) + "[CR]" + "Not released yet" )
        else:
            item_label = ("Episode " + str(episode.number) + "[CR]" + title )
        list_item = ListItem(label = item_label)
        list_item.setInfo('video', episode.getEpisodeInfo())
        list_item.setArt(episode.getEpisodeArt())
        is_folder = False
        addDirectoryItem(plugin.handle, plugin.url_for(
            get_sources, slug, episode.number), list_item, is_folder)
        if int(episode.number) == int(latest_episode):
            item_label = ("Episode " + str(episode.number) + "[CR]" + "Not released yet" )
            break
    endOfDirectory(plugin.handle)

    @plugin.route('/conan')
def show_conan():
    for i in range(700, 900, 10):
        list_item = ListItem(label=("Detective Conan: " + str(i + 1) + " - " + str(i + 10)))
        # list_item.setLabel2(movie.expiration_date)
        # list_item.setInfo('video', movie.getMovieInfo())
        # list_item.setArt(movie.getMovieArt())
        list_item.setProperty('IsPlayable', 'False')
        # url = get_mp4_from_url(baseURL)
        is_folder = True
        addDirectoryItem(plugin.handle, plugin.url_for(
            show_conan_episodes, i + 1), list_item, is_folder)
    endOfDirectory(plugin.handle)

@plugin.route('/conan/<episodes>')
def show_conan_episodes(episodes):
    for i in range(int(episodes), int(episodes) + 10):
        list_item = ListItem(
            label=("Detective Conan - " + str(i)),
            offscreen=True)
        # list_item.setLabel2(movie.expiration_date)
        # list_item.setInfo('video', movie.getMovieInfo())
        # list_item.setArt(movie.getMovieArt())
        list_item.setProperty('IsPlayable', 'False')
        # url = get_mp4_for_conan(i)
        is_folder = True
        list_item
        addDirectoryItem(
            plugin.handle,
            plugin.url_for(play_conan, str(i)),
            list_item, is_folder)
    endOfDirectory(plugin.handle)

@plugin.route('/conan/play/<episode>')
def play_conan(episode):
    item = ListItem(label=("Play episode"))
    item.setProperty('IsPlayable', 'True')
    item.setInfo('video',{
        'mediatype': "tvshow"
    })
    is_folder = False
    addDirectoryItem(
            plugin.handle,
            get_mp4_for_conan(episode),
            item, is_folder)
    endOfDirectory(plugin.handle)

def create_anime_list(anime_list):
    for anime in anime_list:
        list_item = ListItem(label=anime.canonicalTitle)
        list_item.setInfo('video', anime.getAnimeInfo())
        list_item.setArt(anime.getAnimeArt())
        is_folder = True
        if (anime.episodeCount != None) and (anime.episodeCount < 80):
            addDirectoryItem(plugin.handle, plugin.url_for(
                show_episodes, id = anime.id, slug = anime.slug, latest_episode = -1, offset = 0), list_item, is_folder)
        else:
            addDirectoryItem(plugin.handle, plugin.url_for(
                show_grouped_episodes, id = anime.id, slug = anime.slug), list_item, is_folder)
    endOfDirectory(plugin.handle)
